import { FileLikeObject } from './file-like-object.class';
import { FileUploader, ParsedResponseHeaders, FileUploaderOptions } from './file-uploader.class';
import { FileChunk } from './file-chunk.class';
export declare class FileItem {
    file: FileLikeObject;
    _file: File;
    alias: string;
    url: string;
    method: string;
    headers: any;
    withCredentials: boolean;
    formData: any;
    isReady: boolean;
    isUploading: boolean;
    isUploaded: boolean;
    isSuccess: boolean;
    isCancel: boolean;
    isError: boolean;
    progress: number;
    index: number;
    _xhr: XMLHttpRequest;
    _form: any;
    _chunkUploaders: any;
    _fileChunks: FileChunk;
    _currentChunk: number;
    _totalChunks: number;
    protected uploader: FileUploader;
    protected some: File;
    protected options: FileUploaderOptions;
    constructor(uploader: FileUploader, some: File, options: FileUploaderOptions);
    upload(): void;
    createFileChunk(chunkSize: number): void;
    getNextChunk(): any;
    setIsUploading(val: boolean): void;
    fileChunks: FileChunk;
    cancel(): void;
    remove(): void;
    onBeforeUpload(): void;
    onBuildForm(form: any): any;
    onProgress(progress: number): any;
    onSuccess(response: string, status: number, headers: ParsedResponseHeaders): any;
    onError(response: string, status: number, headers: ParsedResponseHeaders): any;
    onCancel(response: string, status: number, headers: ParsedResponseHeaders): any;
    onComplete(response: string, status: number, headers: ParsedResponseHeaders): any;
    onCompleteChunk(response: string, status: number, headers: ParsedResponseHeaders): any;
    _onBeforeUpload(): void;
    _onBuildForm(form: any): void;
    _onProgress(progress: number): void;
    _onSuccess(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onError(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCancel(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onComplete(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCompleteChunk(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCompleteChunkCallnext(): void;
    _prepareToUploading(): void;
}
