export declare class FileChunk {
    stepSize: number;
    rawFile: any;
    uploadProgress: number;
    uploading: boolean;
    uploadComplete: boolean;
    byteStepSize: number;
    totalSize: number;
    startByte: number;
    endByte: number;
    currentChunk: number;
    totalChunks: number;
    uniqueIdentifier: string;
    totalSent: number;
    extraData: any;
    constructor(rawFile: any, options?: any);
    setExtraData(index: any, value: any): void;
    getExtraData(index: any): any;
    setProgress(v: any): void;
    getProgress(): number;
    setUploading(v: boolean): void;
    getUploading(): boolean;
    getUploadComplete(): boolean;
    setUploadComplete(v: boolean): void;
    setUploadProgress(v: number): void;
    getUploadProgress(): number;
    getStartByte(): number;
    setStartByte(v: number): void;
    getEndByte(): number;
    setEndByte(v: number): void;
    getByteStepSize(): number;
    setByteStepSize(v: number): void;
    setTotalSize(v: number): void;
    getTotalSize(): number;
    getRawFile(): any;
    setRawFile(v: File): void;
    getCurrentChunk(): number;
    setCurrentChunk(v: number): void;
    getTotalChunks(): number;
    setTotalChunks(v: number): void;
    setUniqueIdenfier(v: string): void;
    getUniqueIdenfier(): string;
    getRawFileExtension(): any;
    getRawFileName(): any;
    getContentType(): any;
    getTotalSent(): number;
    setTotalSent(v: number): void;
    getCurrentRawFileChunk(): any;
    retrocedeChunk(): boolean;
    prepareNextChunk(): boolean;
    getBrowserSliceMethod(): string;
    generateUniqueIdentifier(): string;
}
